const rarityWeights = {
  common: 0.3,
  rare: 0.055,
  epic: 0.001,
};

const names = ['–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä', 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç', '–º–µ–Ω—Ç–æ—Ä', '—Å—Ç—É–¥–µ–Ω—Ç', '–¥–µ–∫–∞–Ω'];
const templates = {
  simple: [
    '{name} –¥–∞–ª —Ç–µ–±–µ –∏–Ω—Å–∞–π–¥: "{tip}".',
    '–¢—ã –Ω–∞—à—ë–ª —Å—Ç–∞—Ç—å—é –ø—Ä–æ "{tip}" ‚Äî –º–æ–∑–≥ –≤–∑–æ—Ä–≤–∞–ª—Å—è ü§Ø',
    '–ü–æ–∫–∞ –ø–∏–ª –∫–æ—Ñ–µ, —Ç—ã –ø–æ–Ω—è–ª –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç "{tip}" ‚òï'
  ],
  tips: [
    '–Ω–µ–π—Ä–æ—Å–µ—Ç–∏', '–≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫', '—Å–∏—Å—Ç–µ–º—É —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', '—Ç–µ—Ö–Ω–∏–∫—É Pomodoro', '–≤–µ—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ'
  ]
};

// üß† –†–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
const reputationTiers = {
  negative: { min: -Infinity, max: -1 },
  neutral: { min: 0, max: 29 },
  trusted: { min: 30, max: 69 },
  elite: { min: 70, max: Infinity },
};

function getReputationTier(rep) {
  return Object.keys(reputationTiers).find(tier => {
    const { min, max } = reputationTiers[tier];
    return rep >= min && rep <= max;
  });
}

function random(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function chooseWeighted(weights) {
  const total = Object.values(weights).reduce((sum, w) => sum + w, 0);
  const roll = Math.random() * total;
  let cumulative = 0;
  for (const key in weights) {
    cumulative += weights[key];
    if (roll < cumulative) return key;
  }
  return Object.keys(weights)[0];
}

const rewards = {
  common: () => ({ xp: random(5, 10), knowledge: random(3, 8) }),
  rare: () => ({ xp: random(12, 20), knowledge: random(10, 18) }),
  epic: () => ({ xp: random(25, 35), knowledge: random(20, 30) }),
};

// üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è —Å —É—á—ë—Ç–æ–º —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
export function generateRandomEvent(currentReputation = 0) {
  const tier = getReputationTier(currentReputation);
  const allowEpic = tier === 'trusted' || tier === 'elite';
  const allowChoice = tier !== 'negative';

  const adjustedWeights = {
    common: rarityWeights.common,
    rare: rarityWeights.rare,
    epic: allowEpic ? rarityWeights.epic : 0,
  };

  const rarity = chooseWeighted(adjustedWeights);
  const typeRoll = Math.random();

  // ü§ù –°–æ–±—ã—Ç–∏–µ –≤—ã–±–æ—Ä–∞
  if (typeRoll < 0.4 && allowChoice) {
    const acceptReward = rewards[rarity]();
    const declineReward = { xp: random(0, 3), knowledge: random(0, 2), reputation: -1 };
    return {
      type: 'Choices',
      rarity,
      risk: Math.random() < 0.2,
      message: `‚öñÔ∏è ${names[random(0, names.length - 1)]} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ. –ß—Ç–æ —Å–∫–∞–∂–µ—à—å?`,
      choice: {
        accept: { ...acceptReward, reputation: +2 },
        decline: declineReward,
      }
    };
  }

  // üß© –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–±—ã—Ç–∏–µ
  const template = templates.simple[random(0, templates.simple.length - 1)];
  const name = names[random(0, names.length - 1)];
  const tip = templates.tips[random(0, templates.tips.length - 1)];
  const message = template.replace('{name}', name).replace('{tip}', tip);

  return {
    type: 'simple',
    rarity,
    message,
    effect: { ...rewards[rarity](), reputation: 0 }
  };
}
